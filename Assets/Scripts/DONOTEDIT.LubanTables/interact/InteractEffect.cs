
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg.interact
{
public sealed partial class InteractEffect : Luban.BeanBase
{
    public InteractEffect(JSONNode _buf) 
    {
        { if(!_buf["ID"].IsNumber) { throw new SerializationException(); }  ID = _buf["ID"]; }
        { if(!_buf["NAME"].IsNumber) { throw new SerializationException(); }  NAME = _buf["NAME"]; }
        { if(!_buf["DESCRIBE"].IsNumber) { throw new SerializationException(); }  DESCRIBE = _buf["DESCRIBE"]; }
        { var __json0 = _buf["requiredWeaponID"]; if(!__json0.IsArray) { throw new SerializationException(); } RequiredWeaponID = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  RequiredWeaponID.Add(__v0); }   }
        { var __json0 = _buf["requiredFoodID"]; if(!__json0.IsArray) { throw new SerializationException(); } RequiredFoodID = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  RequiredFoodID.Add(__v0); }   }
        { var __json0 = _buf["requiredThrowID"]; if(!__json0.IsArray) { throw new SerializationException(); } RequiredThrowID = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  RequiredThrowID.Add(__v0); }   }
        { var __json0 = _buf["requiredToolID"]; if(!__json0.IsArray) { throw new SerializationException(); } RequiredToolID = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  RequiredToolID.Add(__v0); }   }
    }

    public static InteractEffect DeserializeInteractEffect(JSONNode _buf)
    {
        return new interact.InteractEffect(_buf);
    }

    /// <summary>
    /// 其它表中的物品有一个交互功能ID字段，填写了这里的某一个后就会拥有这里的交互显示逻辑
    /// </summary>
    public readonly int ID;
    /// <summary>
    /// 这里存放的是当满足条件时显示什么
    /// </summary>
    public readonly int NAME;
    /// <summary>
    /// 这里存放的是不满足条件时，或没有条件要求时显示什么
    /// </summary>
    public readonly int DESCRIBE;
    /// <summary>
    /// 当玩家接近交互为这个物品时，如果持有这个列表中任一一个ID的物品，就会显示Name字段的内容，否则出现【描述】字段的内容
    /// </summary>
    public readonly System.Collections.Generic.List<int> RequiredWeaponID;
    public readonly System.Collections.Generic.List<int> RequiredFoodID;
    /// <summary>
    /// 可与之交互的投掷物品ID
    /// </summary>
    public readonly System.Collections.Generic.List<int> RequiredThrowID;
    /// <summary>
    /// 注意，功能描述未以字段形式配在该表中
    /// </summary>
    public readonly System.Collections.Generic.List<int> RequiredToolID;
   
    public const int __ID__ = -1473407425;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "NAME:" + NAME + ","
        + "DESCRIBE:" + DESCRIBE + ","
        + "requiredWeaponID:" + Luban.StringUtil.CollectionToString(RequiredWeaponID) + ","
        + "requiredFoodID:" + Luban.StringUtil.CollectionToString(RequiredFoodID) + ","
        + "requiredThrowID:" + Luban.StringUtil.CollectionToString(RequiredThrowID) + ","
        + "requiredToolID:" + Luban.StringUtil.CollectionToString(RequiredToolID) + ","
        + "}";
    }
}

}

