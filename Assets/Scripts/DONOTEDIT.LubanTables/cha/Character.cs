
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg.cha
{
public sealed partial class Character : Luban.BeanBase
{
    public Character(JSONNode _buf) 
    {
        { if(!_buf["ID"].IsNumber) { throw new SerializationException(); }  ID = _buf["ID"]; }
        { if(!_buf["NAME"].IsString) { throw new SerializationException(); }  NAME = _buf["NAME"]; }
        { if(!_buf["DESCRIBE"].IsString) { throw new SerializationException(); }  DESCRIBE = _buf["DESCRIBE"]; }
        { if(!_buf["PrefabName"].IsString) { throw new SerializationException(); }  PrefabName = _buf["PrefabName"]; }
        { if(!_buf["voicePackID"].IsString) { throw new SerializationException(); }  VoicePackID = _buf["voicePackID"]; }
        { if(!_buf["walkSpeed"].IsNumber) { throw new SerializationException(); }  WalkSpeed = _buf["walkSpeed"]; }
        { if(!_buf["runSpeedScal"].IsNumber) { throw new SerializationException(); }  RunSpeedScal = _buf["runSpeedScal"]; }
        { if(!_buf["runReduce"].IsNumber) { throw new SerializationException(); }  RunReduce = _buf["runReduce"]; }
        { if(!_buf["runRestore"].IsNumber) { throw new SerializationException(); }  RunRestore = _buf["runRestore"]; }
        { if(!_buf["maxHP"].IsNumber) { throw new SerializationException(); }  MaxHP = _buf["maxHP"]; }
        { if(!_buf["maxFood"].IsNumber) { throw new SerializationException(); }  MaxFood = _buf["maxFood"]; }
        { var __json0 = _buf["digestRate"]; if(!__json0.IsArray) { throw new SerializationException(); } DigestRate = new System.Collections.Generic.List<float>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { float __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  DigestRate.Add(__v0); }   }
        { if(!_buf["maxThirsty"].IsNumber) { throw new SerializationException(); }  MaxThirsty = _buf["maxThirsty"]; }
        { if(!_buf["maxSan"].IsNumber) { throw new SerializationException(); }  MaxSan = _buf["maxSan"]; }
        { if(!_buf["strength"].IsNumber) { throw new SerializationException(); }  Strength = _buf["strength"]; }
        { var __json0 = _buf["conditionList"]; if(!__json0.IsArray) { throw new SerializationException(); } ConditionList = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  ConditionList.Add(__v0); }   }
        { if(!_buf["inventorySlots"].IsNumber) { throw new SerializationException(); }  InventorySlots = _buf["inventorySlots"]; }
        { var __json0 = _buf["itemList"]; if(!__json0.IsArray) { throw new SerializationException(); } ItemList = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  ItemList.Add(__v0); }   }
        { if(!_buf["activeSkillID"].IsNumber) { throw new SerializationException(); }  ActiveSkillID = _buf["activeSkillID"]; }
        { if(!_buf["passiveSkillID"].IsNumber) { throw new SerializationException(); }  PassiveSkillID = _buf["passiveSkillID"]; }
    }

    public static Character DeserializeCharacter(JSONNode _buf)
    {
        return new cha.Character(_buf);
    }

    /// <summary>
    /// 序号
    /// </summary>
    public readonly int ID;
    /// <summary>
    /// 名称
    /// </summary>
    public readonly string NAME;
    /// <summary>
    /// 描述
    /// </summary>
    public readonly string DESCRIBE;
    /// <summary>
    /// 预制体名称
    /// </summary>
    public readonly string PrefabName;
    /// <summary>
    /// 语音包
    /// </summary>
    public readonly string VoicePackID;
    /// <summary>
    /// 走路速度（米每秒）
    /// </summary>
    public readonly float WalkSpeed;
    /// <summary>
    /// 跑步速度倍率（乘以走路速度）
    /// </summary>
    public readonly float RunSpeedScal;
    /// <summary>
    /// 跑步每秒消耗体力
    /// </summary>
    public readonly int RunReduce;
    /// <summary>
    /// 非跑步状态每秒恢复值
    /// </summary>
    public readonly int RunRestore;
    /// <summary>
    /// 最大生命值
    /// </summary>
    public readonly int MaxHP;
    /// <summary>
    /// 最大饱腹度
    /// </summary>
    public readonly int MaxFood;
    /// <summary>
    /// 消化效率（消化机制见策划表）
    /// </summary>
    public readonly System.Collections.Generic.List<float> DigestRate;
    /// <summary>
    /// 最大水份值
    /// </summary>
    public readonly int MaxThirsty;
    /// <summary>
    /// 最大San值
    /// </summary>
    public readonly int MaxSan;
    /// <summary>
    /// 力量值
    /// </summary>
    public readonly int Strength;
    /// <summary>
    /// 角色状态列表,不定长，默认为空
    /// </summary>
    public readonly System.Collections.Generic.List<int> ConditionList;
    /// <summary>
    /// 背包栏数量，代表最多放下多少装备
    /// </summary>
    public readonly int InventorySlots;
    /// <summary>
    /// 角色道具列表，默认为空
    /// </summary>
    public readonly System.Collections.Generic.List<int> ItemList;
    /// <summary>
    /// 主动技能ID
    /// </summary>
    public readonly int ActiveSkillID;
    /// <summary>
    /// 被动技能ID
    /// </summary>
    public readonly int PassiveSkillID;
   
    public const int __ID__ = -2124506057;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "NAME:" + NAME + ","
        + "DESCRIBE:" + DESCRIBE + ","
        + "PrefabName:" + PrefabName + ","
        + "voicePackID:" + VoicePackID + ","
        + "walkSpeed:" + WalkSpeed + ","
        + "runSpeedScal:" + RunSpeedScal + ","
        + "runReduce:" + RunReduce + ","
        + "runRestore:" + RunRestore + ","
        + "maxHP:" + MaxHP + ","
        + "maxFood:" + MaxFood + ","
        + "digestRate:" + Luban.StringUtil.CollectionToString(DigestRate) + ","
        + "maxThirsty:" + MaxThirsty + ","
        + "maxSan:" + MaxSan + ","
        + "strength:" + Strength + ","
        + "conditionList:" + Luban.StringUtil.CollectionToString(ConditionList) + ","
        + "inventorySlots:" + InventorySlots + ","
        + "itemList:" + Luban.StringUtil.CollectionToString(ItemList) + ","
        + "activeSkillID:" + ActiveSkillID + ","
        + "passiveSkillID:" + PassiveSkillID + ","
        + "}";
    }
}

}

