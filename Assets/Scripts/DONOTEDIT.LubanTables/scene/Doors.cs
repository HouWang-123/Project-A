
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg.scene
{
public sealed partial class Doors : Luban.BeanBase
{
    public Doors(JSONNode _buf) 
    {
        { if(!_buf["ID"].IsNumber) { throw new SerializationException(); }  ID = _buf["ID"]; }
        { if(!_buf["NAME"].IsString) { throw new SerializationException(); }  NAME = _buf["NAME"]; }
        { if(!_buf["DESCRIBE"].IsString) { throw new SerializationException(); }  DESCRIBE = _buf["DESCRIBE"]; }
        { if(!_buf["toRoomID"].IsNumber) { throw new SerializationException(); }  ToRoomID = _buf["toRoomID"]; }
        { if(!_buf["toDoorID"].IsNumber) { throw new SerializationException(); }  ToDoorID = _buf["toDoorID"]; }
        { if(!_buf["isInvisible"].IsBoolean) { throw new SerializationException(); }  IsInvisible = _buf["isInvisible"]; }
        { if(!_buf["isLocked"].IsBoolean) { throw new SerializationException(); }  IsLocked = _buf["isLocked"]; }
        { var __json0 = _buf["requiredForOpen"]; if(!__json0.IsArray) { throw new SerializationException(); } RequiredForOpen = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  RequiredForOpen.Add(__v0); }   }
    }

    public static Doors DeserializeDoors(JSONNode _buf)
    {
        return new scene.Doors(_buf);
    }

    /// <summary>
    /// 门的序号
    /// </summary>
    public readonly int ID;
    /// <summary>
    /// 名称
    /// </summary>
    public readonly string NAME;
    /// <summary>
    /// 描述
    /// </summary>
    public readonly string DESCRIBE;
    /// <summary>
    /// 通向房间ID
    /// </summary>
    public readonly int ToRoomID;
    /// <summary>
    /// 通向哪个门
    /// </summary>
    public readonly int ToDoorID;
    /// <summary>
    /// 门是否隐形
    /// </summary>
    public readonly bool IsInvisible;
    /// <summary>
    /// 门是否上锁，也就是缠绕状态，但这种缠绕状态不仅是出现在门上的，也会出现在场景交互物体上，注意，当解锁一个门时，通向的那个门也会解锁，而且都是永久的
    /// </summary>
    public readonly bool IsLocked;
    /// <summary>
    /// 打开门需要消耗玩家什么东西，可以消耗任何一种东西比如San值，生命值，钥匙，子弹，道具
    /// </summary>
    public readonly System.Collections.Generic.List<int> RequiredForOpen;
   
    public const int __ID__ = -1372926333;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "NAME:" + NAME + ","
        + "DESCRIBE:" + DESCRIBE + ","
        + "toRoomID:" + ToRoomID + ","
        + "toDoorID:" + ToDoorID + ","
        + "isInvisible:" + IsInvisible + ","
        + "isLocked:" + IsLocked + ","
        + "requiredForOpen:" + Luban.StringUtil.CollectionToString(RequiredForOpen) + ","
        + "}";
    }
}

}

