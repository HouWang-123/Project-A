
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;

namespace cfg
{
public partial class Tables
{
    public skill.ActiveSkillsTable ActiveSkillsTable {get; }
    public cha.CharacterTable CharacterTable {get; }
    public buff.ConditionsTable ConditionsTable {get; }
    public buff.PassiveSkillsTable PassiveSkillsTable {get; }
    public interact.InteractEffectTable InteractEffectTable {get; }
    public func.DropRuleTable DropRuleTable {get; }
    public item.FoodTable FoodTable {get; }
    public item.JewelryTable JewelryTable {get; }
    public item.SceneObjectsTable SceneObjectsTable {get; }
    public item.ThrowObjectsTable ThrowObjectsTable {get; }
    public item.TinyObjectsTable TinyObjectsTable {get; }
    public item.ToolsTable ToolsTable {get; }
    public item.WeaponTable WeaponTable {get; }
    public scene.DoorsTable DoorsTable {get; }
    public scene.RoomsTable RoomsTable {get; }
    public mon.MonsterTable MonsterTable {get; }
    public text.LocalizationTable LocalizationTable {get; }

    public Tables(System.Func<string, JSONNode> loader)
    {
        ActiveSkillsTable = new skill.ActiveSkillsTable(loader("skill_activeskillstable"));
        CharacterTable = new cha.CharacterTable(loader("cha_charactertable"));
        ConditionsTable = new buff.ConditionsTable(loader("buff_conditionstable"));
        PassiveSkillsTable = new buff.PassiveSkillsTable(loader("buff_passiveskillstable"));
        InteractEffectTable = new interact.InteractEffectTable(loader("interact_interacteffecttable"));
        DropRuleTable = new func.DropRuleTable(loader("func_dropruletable"));
        FoodTable = new item.FoodTable(loader("item_foodtable"));
        JewelryTable = new item.JewelryTable(loader("item_jewelrytable"));
        SceneObjectsTable = new item.SceneObjectsTable(loader("item_sceneobjectstable"));
        ThrowObjectsTable = new item.ThrowObjectsTable(loader("item_throwobjectstable"));
        TinyObjectsTable = new item.TinyObjectsTable(loader("item_tinyobjectstable"));
        ToolsTable = new item.ToolsTable(loader("item_toolstable"));
        WeaponTable = new item.WeaponTable(loader("item_weapontable"));
        DoorsTable = new scene.DoorsTable(loader("scene_doorstable"));
        RoomsTable = new scene.RoomsTable(loader("scene_roomstable"));
        MonsterTable = new mon.MonsterTable(loader("mon_monstertable"));
        LocalizationTable = new text.LocalizationTable(loader("text_localizationtable"));
        ResolveRef();
    }
    
    private void ResolveRef()
    {
        ActiveSkillsTable.ResolveRef(this);
        CharacterTable.ResolveRef(this);
        ConditionsTable.ResolveRef(this);
        PassiveSkillsTable.ResolveRef(this);
        InteractEffectTable.ResolveRef(this);
        DropRuleTable.ResolveRef(this);
        FoodTable.ResolveRef(this);
        JewelryTable.ResolveRef(this);
        SceneObjectsTable.ResolveRef(this);
        ThrowObjectsTable.ResolveRef(this);
        TinyObjectsTable.ResolveRef(this);
        ToolsTable.ResolveRef(this);
        WeaponTable.ResolveRef(this);
        DoorsTable.ResolveRef(this);
        RoomsTable.ResolveRef(this);
        MonsterTable.ResolveRef(this);
        LocalizationTable.ResolveRef(this);
    }
}

}
